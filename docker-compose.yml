version: "3.8"
services:
  backend:
    image: nova-be-notification:latest
    container_name: "nova-be-notification"
    environment:
      DB_ENGINE: ${DB_ENGINE}
      DB_USER: ${DB_USER}
      DB_PORT: ${DB_PORT}
      DEV_DB_HOST: ${DEV_DB_HOST}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      FLASK_ENV: ${FLASK_ENV}
      REDIS_SERVER: ${REDIS_SERVER}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    command: ./gunicorn_starter.sh
    ports:
      - 8000:5000
    networks:
      - nova_service
    volumes:
      - .:/app

  consumer:
    image: nova-be-notification:latest
    container_name: "nova-notification-consumer"
    environment:
      DB_ENGINE: ${DB_ENGINE}
      DB_USER: ${DB_USER}
      DB_PORT: ${DB_PORT}
      DEV_DB_HOST: ${DEV_DB_HOST}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      FLASK_ENV: ${FLASK_ENV}
      REDIS_SERVER: ${REDIS_SERVER}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    command: python3 ./app/consumer.py
    networks:
      - nova_service
    volumes:
      - .:/app
    restart: always

  celery_worker:
    image: nova-be-notification:latest
    container_name: "nova-notification-celery-worker"
    environment:
      DB_ENGINE: ${DB_ENGINE}
      DB_USER: ${DB_USER}
      DB_PORT: ${DB_PORT}
      DEV_DB_HOST: ${DEV_DB_HOST}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      FLASK_ENV: ${FLASK_ENV}
      REDIS_SERVER: ${REDIS_SERVER}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    networks:
      - nova_service
    command: celery -A app.celery_app:celery worker -l INFO
    volumes:
      - .:/app

networks:
  nova_service:
    name: nova_network
