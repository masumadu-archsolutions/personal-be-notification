version: "3.8"
services:
  backend:
    image: "nova-be-notification"
    container_name: "nova-be-notification"
    build:
     context: .
     dockerfile: Dockerfile
    environment:
      DB_ENGINE: ${DB_ENGINE}
      DB_USER: ${DB_USER}
      DB_PORT: ${DB_PORT}
      DEV_DB_HOST: ${DEV_DB_HOST}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      FLASK_ENV: ${FLASK_ENV}
      REDIS_SERVER: ${REDIS_SERVER}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    command: ./gunicorn_starter.sh
    ports:
      - 8000:5000
    networks:
      - notification_service
    volumes:
      - .:/app
    depends_on:
      kafka:
        condition: service_started
      db:
        condition: service_healthy
      consumer:
        condition: service_started
      celery_worker:
        condition: service_started

  consumer:
    image: "nova-notification-consumer"
    container_name: "nova-notification-consumer"
    build:
     context: .
     dockerfile: Dockerfile
    environment:
      DB_ENGINE: ${DB_ENGINE}
      DB_USER: ${DB_USER}
      DB_PORT: ${DB_PORT}
      DEV_DB_HOST: ${DEV_DB_HOST}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    command: ./app/script/start_consumer #python3 ./app/consumer.py
    networks:
      - notification_service
    volumes:
      - .:/app
    depends_on:
      kafka:
        condition: service_started
    restart: always

  celery_worker:
    image: "nova-notification-celery-worker"
    container_name: "nova-notification-celery-worker"
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DB_ENGINE: ${DB_ENGINE}
      DB_USER: ${DB_USER}
      DB_PORT: ${DB_PORT}
      DEV_DB_HOST: ${DEV_DB_HOST}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      REDIS_SERVER: ${REDIS_SERVER}
    networks:
      - notification_service
    command: celery -A app.celery_app:app worker -l INFO
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_healthy

  db:
    image: postgres:12
    container_name: "nova-notification-db"
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - $PWD/.dbdata:/var/lib/postgres
    ports:
      - 5430:5432
    networks:
      - notification_service
    healthcheck:
        test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]

  redis:
    image: redis:6.2.6-alpine
    container_name: "redis_server"
    command: redis-server
    ports:
      - 6378:6379
    networks:
      - notification_service
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - 2182:2181
    networks:
      - notification_service

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - 9091:9092
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - notification_service

networks:
  notification_service:
    external:
      name: retailer_service
